Création d'une application To-Do avec Room et Clean Architecture
À la fin de ce TP, vous serez capable de :
1. Mettre en place une base de données locale avec Room.
2. Appliquer les principes de la Clean Architecture.
3. Intégrer Jetpack Compose pour concevoir une interface utilisateur moderne et
réactive.
4. Gérer les états de l'application avec ViewModel et State.
5. Implémenter les fonctionnalités CRUD (Create, Read, Update, Delete).
Contexte du projet
Vous devez créer une application de gestion de tâches dans laquelle l'utilisateur
peut:
• Ajouter une nouvelle tâche.
• Consulter la liste des tâches.
• Modifier une tâche existante.
• Supprimer une tâche.
1. Préparation du projet
1. Créez un nouveau projet Android dans Android Studio avec Jetpack Compose
activé.
2. Ajoutez les les plugins suivants :
a. Dans le premier fichier build.gradle.kts :
 id("com.google.dagger.hilt.android") version "2.51.1" apply false
b. Dans le deuxième fichier build.gradle.kts dans le bloc plugin :
 id("kotlin-kapt")
 id("com.google.dagger.hilt.android")
3. Ajoutez les dépendances nécessaires dans le fichier build.gradle :
 //Room
 implementation("androidx.room:room-runtime:2.6.1")
 kapt("androidx.room:room-compiler:2.6.1")
 implementation("androidx.room:room-ktx:2.6.1")
 // Architecture Components
 implementation("androidx.arch.core:core-common:2.2.0")
 implementation("androidx.lifecycle:lifecycle-common:2.8.7")
 implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")
 implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7")
 // Coroutine
 val coroutine_version = "1.7.3"
 implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version")
 implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version")
 implementation("androidx.fragment:fragment-ktx:1.6.2")
 //Dagger - Hilt
 implementation("com.google.dagger:hilt-android:2.55")
 kapt("com.google.dagger:hilt-android-compiler:2.55")
 implementation("androidx.hilt:hilt-navigation-compose:1.2.0")
N'oubliez pas d'ajouter la configuration pour Hilt et Room dans votre projet.
2. Mise en place de l'architecture Clean
a. Domain Layer
Créez une classe Task représentant une tâche :
Cette classe doit contenir un identifiant, un titre, une description et la date de création.
Ajoutez un repository interface :
b. Data Layer
Créez une entité (TaskEntity) Room pour la table des tâches
Créez une DAO, il doit contenir toutes les opérations CRUD
Configurez la base de données Room
Implémentez le repository
c. Presentation Layer
Créez un TaskViewModel :
d. Le package DI
Configurez Hilt pour injecter les dépendances nécessaires :
• Créez une classe TaskApplication pour initialiser Hilt
• Déclarez cette classe dans le fichier AndroidManifest.xml
• Configuration le module Hilt (TaskModule)
• Injection dans TaskViewModel, TaskRepositoryImpl.
3. Interface Utilisateur avec Jetpack Compose
1. Créez une TaskListScreen pour afficher les tâches.
2. Utilisez des composants comme LazyColumn ou LazyVerticalGrid, TextField
ou OutTextField, Button ou a ou autres pour concevoir l'interface.
4. Ajoutez toutes les fonctionnalités CRUD (Create,
Read, Update et Delete)
Attention : L’application doit fonctionner correctement.